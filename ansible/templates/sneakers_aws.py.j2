from seleniumwire import webdriver
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from pyvirtualdisplay import Display
from time import sleep
import datetime
from loguru import logger
import boto3
from ec2_metadata import ec2_metadata

size_to_num = {'5': 1, '5.5': 2, '6': 3, '6.5': 4, '7': 5, '7.5': 6, '8': 7, '8.5': 8, '9': 9, '9.5': 10, '10': 11,
               '10.5': 12, '11': 13, '11.5': 14, '12': 15}

{% for host, item in credentials.items() %}
    {% if inventory_hostname == host %}
URL = "{{ item.url }}"
EMAIL = "{{ item.email }}"
PASS = "{{ item.password }}"
SIZE = "{{ item.size }}"
CVV = "{{ item.cvv }}"
USER_AGENT = "{{ item.user_agent }}"
PROXY = "{{ item.proxy }}"
YEAR = "{{ item.time.split(' ')[0].split('-')[0] | int }}"
MONTH = "{{ item.time.split(' ')[0].split('-')[1] | int }}"
DAY = "{{ item.time.split(' ')[0].split('-')[2] | int }}"
HOUR = "{{ item.time.split(' ')[1].split(':')[0] | int }}"
MINUTE = "{{ item.time.split(' ')[1].split(':')[1] | int }}"
SECOND = "{{ item.time.split(' ')[1].split(':')[2] | int }}"
    {% endif %}
{% endfor %}

s3_session = boto3.Session(
    aws_access_key_id='{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}',
    aws_secret_access_key='{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}',
)

proxy = {
        'proxy': {
            'https': PROXY
            }
        }


defender = '/home/ec2-user/sneakers/defender.crx'
webrtc = '/home/ec2-user/sneakers/webrtc.crx'

class Nike:
    def __init__(self):
        """Use/not headless Chrome. Hide Selenium. Open the page with Chrome"""
        window = Display(visible=0, size=(1366, 768))
        self.window = window
        self.window.start()
        options = ChromeOptions()
        options.add_argument('--window-size=1366,768')
        options.add_extension(defender)
        options.add_extension(webrtc)
        options.add_argument('--no-sandbox')
        chrome_prefs = dict()
        options.experimental_options["prefs"] = chrome_prefs
        chrome_prefs["profile.default_content_settings"] = {"images": 2}
        chrome_prefs["profile.managed_default_content_settings"] = {"images": 2}
        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--disable-infobars')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--ignore-ssl-errors')
        options.add_argument('ignore-certificate-errors')
        options.add_argument(f'user-agent={USER_AGENT}')

        driver = webdriver.Chrome(
            seleniumwire_options=proxy,
            chrome_options=options,
            executable_path='/usr/local/bin/chromedriver/chromedriver',
            service_args=['--verbose', '--log-path=/home/ec2-user/sneakers/chrdrv.log']
        )
        self.driver = driver

    def page_open(self, page=None):
        """Open the web-page"""
        self.driver.get(page)

    def my_ip(self):
        """Check my proxy ip"""
        self.driver.get('https://ipinfo.io/ip')
        ip = self.driver.find_element(By.TAG_NAME, 'body')
        print(f'My ip is: {ip.text}')

    def load(self, by, string, rule):
        """Waiting for the element to apply to"""
        wait = WebDriverWait(self.driver, 30)
        element_await = wait.until(rule((by, string)))
        element_await.click()

    def form_fill(self, by, string, keys=None):
        """Dealing with input"""
        element_input = self.driver.find_element(by, string)
        element_input.click()
        element_input.send_keys(f'{keys}')

    def pre_login(self):
        """Pre-login operations"""
        actions = ActionChains(self.driver)
        sign_in = self.driver.find_element(By.CLASS_NAME, 'join-log-in')
        actions.move_to_element(sign_in).click().perform()

    def login(self):
        """Login, if error do it one more time"""
        self.driver.find_elements(By.TAG_NAME, 'input')[1].send_keys(EMAIL)
        self.driver.find_elements(By.TAG_NAME, 'input')[2].send_keys(PASS, Keys.ENTER)
        sleep(1)
        while True:
            if self.driver.find_elements(By.CLASS_NAME, 'nike-unite-error-panel'):
                print(datetime.datetime.now(), 'Login Error')
                self.driver.find_element(By.CLASS_NAME, 'nike-unite-error-close').click()
                self.driver.find_elements(By.TAG_NAME, 'input')[2].send_keys(PASS, Keys.ENTER)
                sleep(1)
            else:
                break

    def choose_size(self):
        """Choose size"""
        s = size_to_num.get(SIZE) - 1
        self.driver.find_elements(By.CLASS_NAME, 'size-grid-button')[s].click()

    def cvv_frame(self):
        """Switch to CVV iFrame"""
        iframe = self.driver.find_element(By.ID, 'paymentsIframe')
        self.driver.switch_to.frame(iframe)

    def button_submit_all(self):
        """Click submit order button"""
        actions = ActionChains(self.driver)
        button_s = self.driver.find_element(By.ID, 'stored-cards-paynow')
        actions.move_to_element(button_s).click().perform()

    def close(self):
        """Closing the browser"""
        self.driver.close()
        self.driver.quit()
        self.window.stop()

    def screen(self):
        """Making a final screenshot and saving it to S3, placing public_ip in a name"""
        pub_ip = ec2_metadata.public_ipv4
        self.driver.save_screenshot(f'{pub_ip}--screen.png')
        s3 = s3_session.resource('s3')
        s3.meta.client.upload_file(f'{pub_ip}--screen.png', "{{ lookup('env', 'BUCKET_NAME') }}", f'{pub_ip}--screen.png')

    @staticmethod
    def logger():
        """Adding Exceptions Logs"""
        return logger.add("/home/ec2-user/sneakers/sneakers_err.log", format="{time} {level} {message}", level="DEBUG")


def drop_nike():
    """Drop time function"""
    drop = datetime.datetime(int(YEAR), int(MONTH), int(DAY), int(HOUR), int(MINUTE), int(SECOND))
    delta = drop - datetime.datetime.now()
    if drop.day >= datetime.datetime.now().day and drop.time() > datetime.datetime.now().time():
        return delta.seconds
    return 0


DATE = drop_nike()


@logger.catch
def main():
    try:
        # Open the browser, turn on logs
        nike = Nike()
        nike.logger()
        nike.my_ip()
        nike.page_open('https://www.nike.com/ru/launch')
        print(datetime.datetime.now(), 'The page is loaded successfully')

        # Accept cookies
        # nike.load(By.CLASS_NAME, 'btn-lg', EC.element_to_be_clickable)
        # print(datetime.datetime.now(), 'Cookies accepted')

        # Pre-login
        nike.load(By.CLASS_NAME, 'join-log-in', EC.element_to_be_clickable)
        nike.pre_login()
        print(datetime.datetime.now(), 'Pre-login actions succeeded')

        # Login
        nike.load(By.NAME, 'emailAddress', EC.element_to_be_clickable)
        nike.login()
        print(datetime.datetime.now(), 'Logged in successfully')

        # Sleep and go
        sleep(DATE) if DATE != 0 else True
        nike.page_open(f'{URL}')
        print(datetime.datetime.now(), "Let's go")

        # Choose size and order
        nike.choose_size()
        sleep(1)
        nike.load(By.CLASS_NAME, 'ncss-btn-primary-dark', EC.element_to_be_clickable)
        sleep(1)
        print(datetime.datetime.now(), 'Size chosen')
        sleep(2)
        nike.page_open('https://www.nike.com/ru/cart')

        # Delivery options (member-landing, shipping-form, billing-form)
        sleep(1)
        nike.load(By.CLASS_NAME, 'e16pwdtm0', EC.element_to_be_clickable)
        sleep(1)
        nike.load(By.CLASS_NAME, 'btn--fluid', EC.element_to_be_clickable)
        sleep(1)
        nike.load(By.CLASS_NAME, 'btn--fluid', EC.element_to_be_clickable)
        sleep(1)
        nike.load(By.CLASS_NAME, 'btn--fluid', EC.element_to_be_clickable)
        print(datetime.datetime.now(), 'Done with delivery options')
        sleep(1)

        # CVV input and submit
        sleep(1)
        nike.cvv_frame()
        nike.form_fill(By.ID, 'cardCvc-input', CVV)
        sleep(1)
        nike.button_submit_all()
        print(datetime.datetime.now(), 'Submitted order')
        sleep(450)
        nike.screen()
        print(datetime.datetime.now(), 'Screen')
        nike.close()
        print(datetime.datetime.now(), 'Done successfully')
        exit(0)
    except TimeoutException:
        print(datetime.datetime.now(), 'TimeoutException')
        exit(8)

if __name__ == '__main__':
    main()
